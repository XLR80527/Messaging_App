{% extends 'base.jinja' %}


{% block content %} 

<style>
    nav {
        border-bottom: 1px solid black;
        overflow: auto;
    }

    #mute {
        float: right;
        right: 36px;
        top: 650px;
        position: absolute;
    }

    #unmute {
        float: right;
        right: 20px;
        top: 700px;
        position: absolute;
    }

    #thread {
        float: right;
        right: 10px;
        top: 65px;
        position: absolute;
    }

    #back {
        float: left;
        top: 0.1px;
        position: absolute;
    }


    #title_box {
        border: 1px solid black; 
        height: 400px; 
        width: 300px; 
        overflow: auto;
        padding: 2px;
    }

    #article_box {
        border: 1px solid black;
        height: 400px;
        width: 700px;
        overflow: auto;
        padding: 2px;
        float: right;
        right: 450px;
        position: relative;
        top: -405px;
    }

    #comment_box {
        border: 1px solid black;
        height: 400px;
        width: 350px;
        overflow: auto;
        padding: 2px;
        float: right;
        right: -650px;
        position: relative;
        top: -405px;
    }

    #sidePanel {
        position: fixed;
        top: 0;
        right: -250px;
        width: 250px;
        height: 100%;
        background-color: white;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
        transition: right 0.3s ease;
        z-index: 999; 
    }

    #toggleButton {
        position: absolute;
        top: 50px;
        right: 5px;
        z-index: 1000; 
    }

    #update_title {
        position: absolute;
        float: left;
        top: 600px;
    }

    .popup {
        display: none; /* Hide the popup by default */
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #fff;
        padding: 20px;
        border: 1px solid #ccc;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        z-index: 9999;
    }

    .overlay {
        display: none; /* Hide the overlay by default */
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 9998;
    }

    .input-container {
        margin-bottom: 10px; /* Adjust vertical spacing between input boxes */
        margin-left: 10px;
    }

    .large-button {
    font-size: 25px;
    padding: 10px 20px;
  }


    h2{white-space: pre;}

    
</style>

<nav style="border-bottom: 1px solid black;">
    <ol style="float: right">
         <li style="display:inline-block; position:relative; z-index: 1000;"><button onclick="toggleSidePanel()">Show user info</button></li>
    </ol>
</nav>

<h1>Knowledge Repository</h1>
<h2>Title                                                   Article                                                                                                                Comment</h2>

<main>

    <section id = "mute">
        <input id="receiver1" placeholder="username">
        <button onclick="Mute()">Mute</button>
    </section>

    <section id = "unmute">
        <input id="receiver2" placeholder="username">
        <button onclick="Unmute()">Unmute</button>
    </section>

    <section id = "thread">
        <button class="large-button" onclick="openPopup()">New Thread</button>
    </section>

    <section id = "back">
        <button class="large-button" onclick="back()">Back</button>
    </section>

    <section id ="title_box"></section>
    <section id ="article_box"></section>
    <section id ="comment_box"></section>

</main>

<div id="popup" class="popup">
    <h2>New Thread</h2>
    <div class="input-container">
        <input type="text" id="input1" style="width: 300px;" placeholder="Title"><br>
    </div>

    <div class="input-container">
        <textarea id="input2" style="width: 1000px;" rows="10" placeholder="Content"></textarea><br>
    </div>
    <button onclick="closePopup()">Close</button>
    <button onclick="post('{{username}}')">Post</button>
</div>

<div id="title_pop" class="popup">
    <h2>Options</h2>
    <button onclick="View()">View</button>
    <button onclick="Modify()">Modify</button>
    <button onclick="Delete()">Delete</button>
    <button onclick="add_comment_popup()">Add Comment</button>
    <button onclick="close_title_pop()">Cancle</button>
</div>

<div id="popup1" class="popup">
    <h2>Modify Thread</h2>
    <div class="input-container">
        <input type="text" id="input3" style="width: 300px;" placeholder="Title"><br>
    </div>

    <div class="input-container">
        <textarea id="input4" style="width: 1000px;" rows="10" placeholder="Content"></textarea><br>
    </div>
    <button onclick="closePopup()">Cancle</button>
    <button onclick="Save_Modify()">Save Change</button>
</div>

<div id="comment_popup" class="popup">
    <h2>Add Comment</h2>

    <div class="input-container">
        <textarea id="input5" style="width: 1000px;" rows="10" placeholder="Comment"></textarea><br>
    </div>
    <button onclick="closePopup()">Cancle</button>
    <button onclick="Add_comment()">Post</button>
</div>

<div id="delete_comment_popup" class="popup">
    <button onclick="Delete_comment()">Delete</button>
    <button onclick="close_delete_comment_popup()">Cancle</button>
</div>

<div id="sidePanel">
    <h2>User Info</h2>
    <p>Username: {{ username }}</p>
    <p>Role: <span id="userRole"></span></p>
    
</div>

<!-- Overlay -->
<div id="overlay" class="overlay"></div>

<script>
    var sidePanel = document.getElementById("sidePanel");
    var toggleButton = document.getElementById("toggleButton");

    function toggleSidePanel() {
        if (sidePanel.style.right === "0px") {
            sidePanel.style.right = "-250px";
        } else {
            sidePanel.style.right = "0px";
        }
    }

    update_title('{{username}}')

    setInterval(function() {
        update_title('{{username}}');
    }, 2000);

    setInterval(function() {
        update_article_comment();
    }, 3000);    

    var global_title = ""
    var global_user = ""

    async function View1() {
        var user = global_user
        var t = global_title

        let URL = "{{ url_for('get_article') }}";
        let URL1 = "{{ url_for('get_comment') }}";
        
        let res = await axios.post(URL, {
            username: user,
            title: t
        });

        const article = res.data
        document.getElementById("article_box").innerHTML = "";
        let box1 = $('#article_box');
        let msg1 = $(`<p style="color:black; margin: 0px;"></p>`).text(article);
        box1.append(msg1)

        let res1 = await axios.post(URL1, {
            username: user,
            title: t
        });

        const comment_ls = res1.data
        document.getElementById("comment_box").innerHTML = "";
        let box2 = $('#comment_box');
        for (let i = 0; i < comment_ls.length; i++){
            let comment = comment_ls[i]
            let msg2 = $(`<button style="color:black; margin: 0px; display: block;">${comment}</button>`);
            msg2.click(() => {
                delete_comment_popup(user, t, comment);
            });
            box2.append(msg2)
        }
    }

    async function back() {
        window.open("/home?username=" + '{{username}}', "_self")
    }

    async function update_article_comment() {
        if (global_title != "") {
            View1();
        }
    }

    async function openPopup() {
        let URL = "{{ url_for('get_mute_status') }}";

        let res = await axios.post(URL, {
            username: '{{username}}'
        });
        
        if (res.data === 'TRUE') {
            alert("You are muted")
            return
        }

        document.getElementById('popup').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
    }

    function closePopup() {
        var result = confirm("Any modification won't be saved, you sure you want to procedd?");
        if (result) {
            document.getElementById('popup').style.display = 'none';
            document.getElementById('popup1').style.display = 'none';
            document.getElementById('overlay').style.display = 'none';
            document.getElementById('comment_popup').style.display = 'none';
            document.getElementById('input1').value = '';
            document.getElementById('input2').value = '';
            document.getElementById('input3').value = '';
            document.getElementById('input4').value = '';
            document.getElementById('input5').value = '';
        }
    }

    async function title_pop(user, t) {
        let URL1 = "{{ url_for('check_title') }}";

        let res1 = await axios.post(URL1, {
            username: user,
            title: t
        });
        if (res1.data === "FALSE") {
            alert("This article no longer exist, please update!")
            return
        }

        var title = document.getElementById('title_pop');
        title.style.display = 'block'; 
        document.getElementById('overlay').style.display = 'block';
        title.setAttribute('user', user);
        title.setAttribute('title', t);
    }

    function close_title_pop() {
        document.getElementById('title_pop').style.display = 'none'; 
        document.getElementById('overlay').style.display = 'none';
    }

    async function post(user) {
        var title = document.getElementById('input1').value;
        var article = document.getElementById('input2').value;

        if (title === "") {
            alert("title should not be blank")
            return
        }
        if (article === "") {
            alert("article should not be blank")
            return
        }

        let URL = "{{ url_for('check_title') }}";

        let res = await axios.post(URL, {
            username: user,
            title: title
        });
        
        if (res.data === "TRUE") {
            alert("One user can't have two articles with the same title!")
            return
        }
       
        fetch('/post?user=' + user + '&title=' + title + '&article=' + article)
            .then(response => response.text())
            .then(data => {
                var value = data
                update_title(user)
            })
            .catch(error => console.error('Error:', error));

        document.getElementById('popup').style.display = 'none'; 
        document.getElementById('overlay').style.display = 'none'; 
        document.getElementById('input1').value = '';
        document.getElementById('input2').value = '';

    }

    async function update_title(user) {
        let URL = "{{ url_for('update_title') }}";

        try{
            let res = await axios.post(URL, {
                username: user
            });
            
            const ls = res.data
            document.getElementById("title_box").innerHTML = "";
            let box = $('#title_box');
            for (let i = 0; i < ls.length; i++) {
                let title = ls[i];
                let t = (title.split("---"))[0];
                let u = (title.split("---"))[1];
                u = u.split("(")[0]
                let msg = $(`<button style="color:black; margin: 0px; display: block;">${title}</button>`);
                msg.click(() => {
                    title_pop(u, t);
                });
                box.append(msg)
            }
        } catch (error) {
            console.error(error);
        }
    }

    async function View() {
        var user = document.getElementById('title_pop').getAttribute('user');
        var t = document.getElementById('title_pop').getAttribute('title');
        global_title = t
        global_user = user

        let URL = "{{ url_for('get_article') }}";
        let URL1 = "{{ url_for('get_comment') }}";
        
        let res = await axios.post(URL, {
            username: user,
            title: t
        });

        const article = res.data
        document.getElementById("article_box").innerHTML = "";
        let box1 = $('#article_box');
        let msg1 = $(`<p style="color:black; margin: 0px;"></p>`).text(article);
        box1.append(msg1)

        let res1 = await axios.post(URL1, {
            username: user,
            title: t
        });

        const comment_ls = res1.data
        document.getElementById("comment_box").innerHTML = "";
        let box2 = $('#comment_box');
        for (let i = 0; i < comment_ls.length; i++){
            let comment = comment_ls[i]
            let msg2 = $(`<button style="color:black; margin: 0px; display: block;">${comment}</button>`);
            msg2.click(() => {
                delete_comment_popup(user, t, comment);
            });
            box2.append(msg2)
        }

        close_title_pop()
    }

    async function Modify() {
        var user = document.getElementById('title_pop').getAttribute('user');
        var t = document.getElementById('title_pop').getAttribute('title');

        let URL1 = "{{ url_for('get_mute_status') }}";

        let res1 = await axios.post(URL1, {
            username: '{{username}}'
        });
        
        if (res1.data === 'TRUE') {
            alert("You are muted")
            return
        }

        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        
        if (res2.data != "Administrative" && '{{username}}' != user ) {
            alert("Only staff can modify other's articles")
            return
        }

        let URL = "{{ url_for('get_before_modify') }}";
        
        let res = await axios.post(URL, {
            username: user,
            title: t
        });

        close_title_pop()

        let original_title = res.data[0]
        let original_article = res.data[1]

        document.getElementById('popup1').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
        document.getElementById('input3').value = original_title
        document.getElementById('input4').value = original_article

        let pop = document.getElementById('popup1');
        pop.setAttribute("original_title", original_title)
        pop.setAttribute("original_article", original_article)
        pop.setAttribute("user", user)

    }

    async function Save_Modify() {
        var original_title = document.getElementById('popup1').getAttribute('original_title');
        var original_article = document.getElementById('popup1').getAttribute('original_article');
        var user = document.getElementById('popup1').getAttribute('user');
        var modified_title = document.getElementById('input3').value;
        var modified_article = document.getElementById('input4').value;

        if (modified_title === "") {
            alert("title should not be blank")
            return
        }
        if (modified_article === "") {
            alert("article should not be blank")
            return
        }

        
        
        let URL = "{{ url_for('check_modify') }}";
        
        let res = await axios.post(URL, {
            username: user,
            title: original_title,
            modified_title: modified_title
        });

        if (res.data === "FALSE") {
            alert("The modified title is used already, please use another one!")
            return
        }

        let URL1 = "{{ url_for('Modify') }}";
        
        let res1 = await axios.post(URL1, {
            username: user,
            title: original_title,
            modified_title: modified_title,
            modified_article: modified_article
        });

        document.getElementById('popup1').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
        update_title(user)
    }

    async function Delete() {
        var user = document.getElementById('title_pop').getAttribute('user');
        var t = document.getElementById('title_pop').getAttribute('title');

        let URL1 = "{{ url_for('get_mute_status') }}";

        let res1 = await axios.post(URL1, {
            username: '{{username}}'
        });
        
        if (res1.data === 'TRUE') {
            alert("You are muted")
            return
        }

        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        
        if (res2.data != "Administrative" && '{{username}}' != user ) {
            alert("Only staff can delete other's articles")
            return
        }

        fetch('/Delete?username=' + user + '&title=' + t)
            .then(response => response.text())
            .then(data => {
                var value = data
                update_title(user)
            })
            .catch(error => console.error('Error:', error));

        close_title_pop()
    }

    async function add_comment_popup() {
        let URL1 = "{{ url_for('get_mute_status') }}";

        let res1 = await axios.post(URL1, {
            username: '{{username}}'
        });
        
        if (res1.data === 'TRUE') {
            alert("You are muted")
            return
        }

        close_title_pop()
        document.getElementById('comment_popup').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
    }

    async function Add_comment() {
        var user = document.getElementById('title_pop').getAttribute('user');
        var user1 = '{{username}}'
        var title = document.getElementById('title_pop').getAttribute('title');
        var comment = document.getElementById('input5').value

        if (comment === "") {
            alert("Comment should not be blank")
            return
        }


        let URL = "{{ url_for('Add_comment') }}";
        await axios.post(URL, {
            username: user,
            comment_user: user1,
            title: title,
            comment: comment
        });
        document.getElementById('comment_popup').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }

    function delete_comment_popup(user, title, comment) {
        document.getElementById('delete_comment_popup').style.display = 'block';
        document.getElementById('overlay').style.display = 'block';
        let delete_comment = document.getElementById('delete_comment_popup')
        delete_comment.setAttribute("user", user)
        delete_comment.setAttribute("title", title)
        delete_comment.setAttribute("comment", comment)
    }

    function close_delete_comment_popup() {
        document.getElementById('delete_comment_popup').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }


    async function Delete_comment() {
        let dc = document.getElementById('delete_comment_popup')
        var user = dc.getAttribute('user')
        var title = dc.getAttribute('title')
        var comment = dc.getAttribute('comment')
        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        
        if (res2.data != "Administrative" && '{{username}}' != comment.split(":")[0]) {
            alert("Only staff can delete someone else's comments")
            return
        }

        let URL = "{{ url_for('Delete_comment') }}";
        await axios.post(URL, {
            username: user,
            title: title,
            comment: comment
        });
        document.getElementById('delete_comment_popup').style.display = 'none';
        document.getElementById('overlay').style.display = 'none';
    }

    async function Mute() {
        let user = document.getElementById("receiver1").value;
        if (user === "") {
            alert("Missing input!")
            return
        }

        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        
        if (res2.data != "Administrative" && '{{username}}' != user ) {
            alert("Only staff can mute someone")
            return
        }

        let URL1 = "{{ url_for('check_user1') }}";
        let res1 = await axios.post(URL1, {
            username: user
        });
        if (res1.data === "FALSE") {
            alert(user + " does not exist!")
            return
        }

        let URL = "{{ url_for('Mute') }}";
        await axios.post(URL, {
            username: user
        });
        alert(user + " is muted!")
        document.getElementById("receiver1").value = ""
    }

    async function Unmute() {
        let user = document.getElementById("receiver2").value;

        if (user === "") {
            alert("Missing input!")
            return
        }

        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        
        if (res2.data != "Administrative") {
            alert("Only staff can unmute someone")
            return
        }

        let URL1 = "{{ url_for('check_user1') }}";
        let res1 = await axios.post(URL1, {
            username: user
        });
        if (res1.data === "FALSE") {
            alert(user + " does not exist!")
            return
        }

        let URL = "{{ url_for('Unmute') }}";
        await axios.post(URL, {
            username: user
        });
        alert(user + " is unmuted!")
        document.getElementById("receiver2").value = ""
    }

    $(document).ready(async () => {
        var username = "{{ username }}";
        let URL2 = "{{ url_for('get_role') }}";

        let res2 = await axios.post(URL2, {
            username: '{{username}}'
        });
        if (res2.data == "Administrative"){
            res2.data = "Administrative Staff"
        }
        if (res2.data == "Admin"){
            res2.data = "Admin User"
        }
        document.getElementById('userRole').innerText = res2.data;     
    });

</script>

{% endblock %}
